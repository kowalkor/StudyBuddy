/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.example.ryank.studybuddy.quizdialogs;

import com.example.ryank.studybuddy.filesystem.Card;
import com.example.ryank.studybuddy.filesystem.Chapter;
import com.example.ryank.studybuddy.filesystem.Note;
import com.example.ryank.studybuddy.filesystem.User;
import com.example.ryank.studybuddy.errordialogs.EmptyListError;
import java.awt.Frame;
import java.util.ArrayList;
import javax.swing.DefaultListModel;
 
/**
 *
 * @author Ryan
 */
public class ReviewPickDialog extends javax.swing.JDialog {

    User user;
    public boolean isCanceled;
    public boolean useCardList;
    boolean emptyListSize;
    DefaultListModel classListModel;
    DefaultListModel chapterListModel;
    DefaultListModel selectedListModel;
    int classListIndex;
    int chapterListIndex;
    int selectedListIndex;
    public ArrayList<Chapter> chapterArray;
    public ArrayList<Card> cardArray;
    public ArrayList<Note> noteArray;
    Frame parentFrame;

    /**
     * Creates new form ReviewPickDialog
     */
    public ReviewPickDialog(java.awt.Frame parent, User user) {
        super(parent, true);
        isCanceled = true;
        classListModel = new DefaultListModel();
        chapterListModel = new DefaultListModel();
        selectedListModel = new DefaultListModel();
        classListIndex = -1;
        chapterListIndex = 0;
        selectedListIndex = -1;
        emptyListSize = false;
        chapterArray = new ArrayList<Chapter>();
        cardArray = new ArrayList<Card>();
        noteArray = new ArrayList<Note>();
        this.user = user;
        this.parentFrame = parent;

        useCardList = true;
        initComponents();
        this.setLocationRelativeTo(parent);

        updateClassList();
        updateChapterList();
        updateSelectedList();

        this.pack();
        this.setVisible(true);
    }

    public ReviewPickDialog(java.awt.Frame parent) {
        super(parent, true);
        this.parentFrame = parent;
        classListModel = new DefaultListModel();
        chapterListModel = new DefaultListModel();
        selectedListModel = new DefaultListModel();
        classListIndex = 0;
        chapterListIndex = 0;
        selectedListIndex = -1;
        emptyListSize = false;

        initComponents();
        this.setLocationRelativeTo(parent);
        updateClassList();
        updateChapterList();
        updateSelectedList();
        this.setVisible(true);
    }

    public boolean isCanceled() {
        return isCanceled;
    }

    public ArrayList<Chapter> getSelectedChapters() {
        return chapterArray;
    }

    public void updateClassList() {
        classListModel.clear();

        for (int i = 0; i < user.getClasses().size(); i++) {
            classListModel.addElement(user.getClass(i).getClassName());
        }

    }

    public void updateChapterList() {
        chapterListModel.clear();
        if (classListIndex != -1) {
            for (int i = 0; i < user.getClass(classListIndex).getChapters().size(); i++) {
                chapterListModel.addElement(user.getClass(classListIndex).getChapter(i).getChapterName());
            }
        }

    }

    public void updateSelectedList() {
        selectedListModel.clear();
        for (int i = 0; i < chapterArray.size(); i++) {
            selectedListModel.addElement(chapterArray.get(i).getChapterName());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        classList = new javax.swing.JList();
        jScrollPane3 = new javax.swing.JScrollPane();
        chapterList = new javax.swing.JList();
        jScrollPane4 = new javax.swing.JScrollPane();
        selectedChaptersList = new javax.swing.JList();
        cancelButton = new javax.swing.JButton();
        reviewButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        addChapterButton = new javax.swing.JButton();
        removeChapterButton = new javax.swing.JButton();
        cardsRadioButton = new javax.swing.JRadioButton();
        notesRadioButton = new javax.swing.JRadioButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Review");

        classList.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Classes", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Monospaced", 1, 12))); // NOI18N
        classList.setFont(new java.awt.Font("Monospaced", 1, 12)); // NOI18N
        classList.setModel(classListModel);
        classList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        classList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                classListValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(classList);

        chapterList.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Chapters", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Monospaced", 1, 12))); // NOI18N
        chapterList.setFont(new java.awt.Font("Monospaced", 1, 12)); // NOI18N
        chapterList.setModel(chapterListModel);
        chapterList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        chapterList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                chapterListValueChanged(evt);
            }
        });
        jScrollPane3.setViewportView(chapterList);

        selectedChaptersList.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Selected Chapters", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Monospaced", 1, 12))); // NOI18N
        selectedChaptersList.setFont(new java.awt.Font("Monospaced", 1, 12)); // NOI18N
        selectedChaptersList.setModel(selectedListModel);
        selectedChaptersList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        selectedChaptersList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                selectedChaptersListValueChanged(evt);
            }
        });
        jScrollPane4.setViewportView(selectedChaptersList);

        cancelButton.setFont(new java.awt.Font("Monospaced", 1, 14)); // NOI18N
        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        reviewButton.setFont(new java.awt.Font("Monospaced", 1, 14)); // NOI18N
        reviewButton.setText("Ok");
        reviewButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reviewButtonActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Monospaced", 1, 24)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Pick Chapters");

        addChapterButton.setFont(new java.awt.Font("Monospaced", 1, 14)); // NOI18N
        addChapterButton.setText(">>>>");
        addChapterButton.setEnabled(false);
        addChapterButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addChapterButtonActionPerformed(evt);
            }
        });

        removeChapterButton.setFont(new java.awt.Font("Monospaced", 1, 14)); // NOI18N
        removeChapterButton.setText("<<<<");
        removeChapterButton.setEnabled(false);
        removeChapterButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeChapterButtonActionPerformed(evt);
            }
        });

        cardsRadioButton.setFont(new java.awt.Font("Monospaced", 1, 14)); // NOI18N
        cardsRadioButton.setSelected(true);
        cardsRadioButton.setText("Cards");
        cardsRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cardsRadioButtonActionPerformed(evt);
            }
        });

        notesRadioButton.setFont(new java.awt.Font("Monospaced", 1, 14)); // NOI18N
        notesRadioButton.setText("Notes");
        notesRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                notesRadioButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 1099, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 434, Short.MAX_VALUE)
                        .addComponent(cardsRadioButton, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(26, 26, 26))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(cancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addGap(7, 7, 7)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(notesRadioButton, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(435, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(reviewButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(addChapterButton, javax.swing.GroupLayout.DEFAULT_SIZE, 94, Short.MAX_VALUE)
                            .addComponent(removeChapterButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(7, 7, 7)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addGap(13, 13, 13))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(4, 4, 4)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(notesRadioButton)
                    .addComponent(cardsRadioButton))
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addComponent(jScrollPane3)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addComponent(addChapterButton, javax.swing.GroupLayout.DEFAULT_SIZE, 142, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(removeChapterButton, javax.swing.GroupLayout.DEFAULT_SIZE, 143, Short.MAX_VALUE)
                        .addGap(29, 29, 29))
                    .addComponent(jScrollPane4))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(reviewButton)
                    .addComponent(cancelButton))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addChapterButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addChapterButtonActionPerformed
        chapterArray.add(user.getClass(classListIndex).getChapter(chapterListIndex));
        selectedListIndex = chapterArray.size() - 1;
        this.selectedChaptersList.setSelectedIndex(selectedListIndex);
        updateSelectedList();
    }//GEN-LAST:event_addChapterButtonActionPerformed

    private void removeChapterButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeChapterButtonActionPerformed
        chapterArray.remove(selectedListIndex);
        selectedListIndex = -1;
        this.selectedChaptersList.setSelectedIndex(selectedListIndex);
        updateSelectedList();
    }//GEN-LAST:event_removeChapterButtonActionPerformed

    private void classListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_classListValueChanged
        classListIndex = classList.getSelectedIndex();
        chapterListIndex = -1;
        chapterList.setSelectedIndex(-1);
        this.addChapterButton.setEnabled(false);

        updateChapterList();
    }//GEN-LAST:event_classListValueChanged

    private void chapterListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_chapterListValueChanged
        chapterListIndex = chapterList.getSelectedIndex();

        if (chapterListIndex > -1) {
            this.addChapterButton.setEnabled(true);

        }

    }//GEN-LAST:event_chapterListValueChanged

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        isCanceled = true;
        this.setVisible(false);
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void reviewButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reviewButtonActionPerformed
        if (this.useCardList == true) {
            System.out.println("made it");
            putCardsIntoList();
        } else {
            putNotesIntoList();
        }
        if (this.emptyListSize == true) {
            EmptyListError emptyListError = new EmptyListError(new javax.swing.JFrame());
            emptyListError.setVisible(true);
        } else {
            this.isCanceled = false;
            this.setVisible(false);
            
            
        }
    }//GEN-LAST:event_reviewButtonActionPerformed

    private void cardsRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cardsRadioButtonActionPerformed
        this.cardsRadioButton.setSelected(true);
        this.notesRadioButton.setSelected(false);
        classListIndex = -1;
        this.classList.setSelectedIndex(classListIndex);
        this.useCardList = true;
        this.updateClassList();
        this.updateChapterList();
        this.updateSelectedList();


    }//GEN-LAST:event_cardsRadioButtonActionPerformed

    private void notesRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_notesRadioButtonActionPerformed
        this.notesRadioButton.setSelected(true);
        this.cardsRadioButton.setSelected(false);
        this.useCardList = false;
        classListIndex = -1;
        classList.setSelectedIndex(classListIndex);
        this.updateClassList();
        this.updateChapterList();
        this.updateSelectedList();
    }//GEN-LAST:event_notesRadioButtonActionPerformed

    private void selectedChaptersListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_selectedChaptersListValueChanged
        if (selectedListIndex != -1) {
            this.removeChapterButton.setEnabled(true);
        } else {
            this.removeChapterButton.setEnabled(false);
        }

    }//GEN-LAST:event_selectedChaptersListValueChanged

    public void putCardsIntoList() {
        cardArray.clear();
        for (int i = 0; i < chapterArray.size(); i++) {

            for (int j = 0; j < chapterArray.get(i).getCards().size(); j++) {
                cardArray.add(chapterArray.get(i).getCard(j));

            }
        }
        if (cardArray.size() < 1) {
            this.emptyListSize = true;

        } else {
            this.emptyListSize = false;
        }
    }

    public void putNotesIntoList() {
        noteArray.clear();
        for (int i = 0; i < chapterArray.size(); i++) {

            for (int j = 0; j < chapterArray.get(i).getNotes().size(); j++) {
                noteArray.add(chapterArray.get(i).getNote(j));

            }
        }
        if (noteArray.size() < 1) {
            this.emptyListSize = true;

        } else {
            this.emptyListSize = false;
        }
    }

    public boolean getUseCardList() {
        return useCardList;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ReviewPickDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ReviewPickDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ReviewPickDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ReviewPickDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                ReviewPickDialog dialog = new ReviewPickDialog(new javax.swing.JFrame());
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addChapterButton;
    private javax.swing.JButton cancelButton;
    private javax.swing.JRadioButton cardsRadioButton;
    private javax.swing.JList chapterList;
    private javax.swing.JList classList;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JRadioButton notesRadioButton;
    private javax.swing.JButton removeChapterButton;
    private javax.swing.JButton reviewButton;
    private javax.swing.JList selectedChaptersList;
    // End of variables declaration//GEN-END:variables
}
